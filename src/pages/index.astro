---
import Layout from '~/layouts/PageLayout.astro';

import HeroText from '~/components/widgets/HeroText.astro';
import Note from '~/components/widgets/Note.astro';
import Features from '~/components/widgets/Features.astro';
import Steps from '~/components/widgets/Steps.astro';
import FAQs from '~/components/widgets/FAQs.astro';
import CallToAction from '~/components/widgets/CallToAction.astro';
import SignupFormSchemaCode from '~/examples/simple/schema.ts?raw';
import { formHTML } from '~/examples/simple/form.ts';
import "src/styles/code.css";
import "src/styles/normform.css";

const metadata = {
  title: 'CruddyForms â€” Generate HTML forms using Typebox.',
  ignoreTitleTemplate: true,
};
---

<Layout metadata={metadata}>
  <HeroText
    callToAction={{
        variant: 'primary',
        text: 'Download',
        href: 'https://github.com/onwidget/astrowind',
        target: '_blank',
        icon: 'tabler:download',
     } }
     callToAction2={{
        text: 'Learn more',
        href: '#features',
     } }
  ></HeroText>
    <Fragment slot="title">
      Modern HTML Form Validation, Made Easy.
    </Fragment>

    <Fragment slot="subtitle">
      <span class="hidden sm:inline">
      Describe your form as a TypeBox schema. <span class="font-semibold">CruddyForms</span> generates the HTML and validation code for both the client and server.
      </span>
    </Fragment>

  <!-- Note Widget ******************* -->
  <Note />

  <!-- Live Demo ************** -->
  <FAQs
  title="See it in Action"
  subtitle="This TypeBox schema defines the validation constraints for the form."
  tagline="Live Demo"
  classes={{ container: 'max-w-6xl' }}
  items={[
      {
        title: 'TypeBox Schema',
        description: "<p>",
        code: `${SignupFormSchemaCode}`,
      },
      {
        title: 'Resulting HTML Form',
        description: `This form was generated by CruddyForms from the provided schema. Try it out to see the client-side validation in action!<br><br>${formHTML()}`,
      },
    ]}
  >
  </FAQs>

  <!-- Features Widget *************** -->

  <Features
    id="features"
    tagline="Features"
    title="What you get with CruddyForms"
    subtitle="A simple, free node module to include in your server-side typescript application."
    items={[
      {
        title: 'Validation on the server using TypeBox',
        description:
          'CruddyForms leverages <span class="font-medium"><a href="https://github.com/sinclairzx81/typebox/tree/master">TypeBox</a></span> to provide serverside validation of data submitted through your forms.',
        icon: 'tabler:checkbox',
      },
      {
        title: 'Validation on the client using HTML5',
        description:
          'CruddyForms generates HTML from your TypeBox schema to tell modern web browsers how to validate the data in your forms. Client-side validation works without the need for javascript.',
        icon: 'tabler:checklist',
      },
      {
        title: 'Beautiful form styling using Normform CSS',
        description:
          'CruddyForms generates HTML that works automatically with <span class="font-medium"><a href="https://normform.netlify.app">Normform CSS</a></span> to elegantly render your forms and user validation messages.',
        icon: 'tabler:file-type-css',
      },
      {
        title: 'Type safety for your server application',
        description:
          'Building upon the foundation of typescript and TypeBox, CruddyForms provides a type-safe development interface.',
        icon: 'tabler:brand-typescript',
      },
      {
        title: 'Optional custom server-side validation',
        description:
          "Need to do extra validation on the server? No problem! CruddyForms generates vanilla javascript to call your REST endpoint and display your custom error messages.",
        icon: 'tabler:arrows-right-left',
      },
      {
        title: 'Framework neutrality',
        description:
          'CruddyForms only generates HTML and vanilla javascript, and it only uses standard node APIs on the server. Use it with the client or server framework of your choice.',
        icon: 'tabler:yin-yang-filled',
      },
    ]}
  />

  <!-- Steps Widget ****************** -->

  <Steps
    title="Adding CruddyForms to Your Site"
    items={[
      {
        title: 'Step 1: <span class="font-medium">Add CruddyForms to your project.</span>',
        description:
          "Install the CruddyForms package into your project, using pnpm, yarn, or npm.",
        icon: 'tabler:check',
      },
      {
        title: 'Step 2: <span class="font-medium">Define the schema for your form using TypeBox</em>',
        description:
          "In your typescript server code, use the TypeBox module to set the constraints you want to enforce for each field in your form, such as minLength or maxLength. Use regular expressions for more complex constraints.",
        icon: 'tabler:check',
      },
      {
        title: 'Step 3: <span class="font-medium">Use CruddyForms to create the HTML for your form.</span>',
        description:
          'In your typescript server code, use the CruddyForms module to convert your TypeBox schema into an HTML form with built-in client-side validation. Serve the form to your users.',
        icon: 'tabler:check',
      },
      {
        title: 'Step 4: <span class="font-medium">Use CruddyForms for server-side validation.</span>',
        description:
          'In your typescript server code, use the CruddyForms module to validate form submissions, in case a user bypasses client-side validation.',
        icon: 'tabler:check',
      },
      {
        title: 'Step 5 (Optional): <span class="font-medium">Add custom servier-side validation.</span>',
        description:
          'If you need additional server-side validation, e.g. making sure a username is unique, create a REST endpoint and tell CruddyForms about it. CruddyForms will automatically generate client-side javascript to call your endpoint and display relevant error messages.',
        icon: 'tabler:check',
      },
    ]}
  />

  <!-- FAQs Widget ******************* -->

  <FAQs
    title="Frequently Asked Questions"
    subtitle=""
    tagline="FAQs"
    classes={{ container: 'max-w-6xl' }}
    items={[
      {
        title: 'Why another forms module?',
        description:
          "CruddyForms is designed to be lightweight and framework-agnostic. You can use it without any client-side javascript. In case you need custom server-side validation, CruddyForms generates a very small amount of (vanilla) client-side javascript to make the necessary requests.",
      },
      {
        title: 'Does it work with React? How about Vue?',
        description:
          'CruddyForms doesn\'t rely on any client-side javascript frameworks, so you don\'t need React or Vue in order to use CruddyForms.',
      },
      {
        title: 'The client-side validation in CruddyForms seems to work pretty well. Are you sure it\'s not using client-side javascript?',
        description:
          "It's true - basic client-side validation is done with HTML and some clever CSS, thanks to Normform! CruddyForms also provides a small client-side javascript file that you can use if you need support for custom server-side validation or toggling the visibility of password text.",
      },
      {
        title: "What about older browsers that don't support built-in form validation?",
        description:
          "CruddyForms does not attempt to do client-side validation in older browsers. However, CruddyForms makes it easy to implement server-side form validation, which is essential to protect your backend systems.",
      },
      {
        title: 'How can I verify that server-side validation is working for users of older browsers?',
        description:
          "During development, you can temporarily set <i>novalidate</i> to <i>true</i> to create a form with browser validation disabled.",
      },
      {
        title: 'I want my form to asyncronously check the server to see if a username is available, before the user submits the form. Can CruddyForms help?',
        description:
          "Yes! You can supply a REST endpoint for any field, and CruddyForms will generate vanilla javascript that will asyncronously call your endpoint and display any validation errors to the user.",
      },
      {
        title: 'Does CruddyForms work with Astro? How about SvelteKit?',
        description:
          "CruddyForms has been tested with Astro SSR, but it is agnostic when it comes to server frameworks - it should work with just about any modern framework.",
      },
      {
        title: 'How can I change the styling of the forms?',
        description:
          "Since CruddyForms uses Normform CSS, you can create your own modified version of the normform.css file. If you come up with something you like, let us know. It could become another theme option for CruddyForms :)",
      },
    ]}
  />

  <!-- CallToAction Widget *********** -->

  <CallToAction
    actions={[
      {
        variant: 'primary',
        text: 'Download',
        href: 'https://github.com/onwidget/astrowind',
        target: '_blank',
        icon: 'tabler:download',
      },
    ]}
  >
    <Fragment slot="title">
        Get CruddyForms
    </Fragment>

    <Fragment slot="subtitle">
      Use it freely in your projects, under the terms of the MIT license.
    </Fragment>
  </CallToAction>
</Layout>
